---

- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - "defaults.yml"
    - "environments/{{ stack_name }}.yml"
  vars:
    key_name: "{{ stack_name }}-fxadev"
    config_name: "{{ stack_name }}"
  tasks:
    - name: generate (optional) RDS password
      shell: openssl rand -hex 8
      register: rds_password

    - name: create key pair
      local_action:
        module: ec2_key
        name: "{{ key_name }}"
        region: "{{ region }}"
        key_material: "{{ item }}"
      with_file: ~/.ssh/id_rsa.pub

    - name: create basic stack (this should take ~5 minutes)
      action: cloudformation
        stack_name="{{ stack_name }}-fxadev"
        state=present
        region="{{ region }}"
        template=cloudformation/moz-single.json
      args:
        template_parameters:
          KeyName: "{{ key_name }}"
          ConfigName: "{{ config_name }}"
          BranchName: "{{ fxadev_git_version }}"
          HostedZone: "{{ hosted_zone }}"
          Subdomain: "{{ subdomain }}"
          RDSPassword: "{{ rds_password.stdout }}"
          UseRDS: "{{ use_rds | default('false') }}"
          SSLCertificateArn: "{{ ssl_certificate_arn }}"
          EC2InstanceType: "{{ ec2_instance_type }}"
          EC2VolumeSize: "{{ ec2_volume_size | to_json }}"
        tags:
          Owner: "{{ owner | default('nobody@mozilla.com') }}"
          REAPER_SPARE_ME: "{{ reaper_spare_me | default('false') }}"
      register: stack

    - debug: var=stack

    - debug: msg={{ stack | json_query('stack_resources[?logical_resource_id==`FxaELB`].physical_resource_id | [0]') }}

    - name: Waiting for instance to join ELB (ignore FAILED RETRYING log messages)
      ec2_elb_facts:
        names:
          - "{{ stack | json_query('stack_resources[?logical_resource_id==`FxaELB`].physical_resource_id | [0]') }}"
        region: "{{ region }}"
      ignore_errors: yes
      register: fxaelb
      until: >
        fxaelb and fxaelb.get('elbs') and (fxaelb.get('elbs') | length) > 0
          and fxaelb.get('elbs')[0].get('instances_inservice_count')
          and fxaelb.get('elbs')[0].get('instances_inservice_count') == 1
      retries: 40 # 10 mins
      delay: 15

    - debug: var=fxaelb.get('elbs')[0]['instances_inservice_count']

    - name: Assert that last task did not time out
      assert:
        that: fxaelb.get('elbs')[0]['instances_inservice_count'] == 1

    - name: Check that the FxA services are returning a plausible `/__version__`
      uri:
        url="{{ item.host }}"
        return_content=yes
        follow_redirects=none
      ignore_errors: yes # guard against early phase failure of DNS lookup or TCP connection
      register: response
      until: response and response.get('json') and response.get('json')['version'] is defined
      retries: 40 # 10 mins
      delay: 15
      with_items:
        # auth-server will start first, followed by content, RPs, oauth, profile
        - host: "https://{{ stack['stack_outputs']['ContentHost'] }}/auth/__version__"
        - host: "https://{{ stack['stack_outputs']['ContentHost'] }}/__version__"
        - host: "https://oauth-{{ stack['stack_outputs']['ContentHost'] }}/__version__"
        - host: "https://{{ stack['stack_outputs']['ContentHost'] }}/profile/__version__"

    - name: Assert that there are four responses from above
      assert:
        that: "(response.results | length) == 4"

    - name: Assert that each response has returned a version correctly
      assert:
        that: item['version'] is defined
      with_items: "{{ response.results | json_query('[][json]') }}"

    - debug: msg="{{ (response.results | json_query('[][json]')) }}"
